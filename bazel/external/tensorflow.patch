diff --git a/tensorflow/lite/build_def.bzl b/tensorflow/lite/build_def.bzl
index b9bf02b373d..9bcf61c6217 100644
--- a/tensorflow/lite/build_def.bzl
+++ b/tensorflow/lite/build_def.bzl
@@ -16,6 +16,9 @@ def tflite_copts():
     """Defines common compile time flags for TFLite libraries."""
     copts = [
         "-DFARMHASH_NO_CXX_STRING",
+        "-Wno-unused-but-set-variable",
+        "-Wno-deprecated-declarations",
+        "-Wno-gnu-inline-cpp-without-extern",
     ] + select({
         clean_dep("//tensorflow:android_arm"): [
             "-mfpu=neon",
diff --git a/tensorflow/workspace1.bzl b/tensorflow/workspace1.bzl
index fb72d54e4d6..0ece61ce702 100644
--- a/tensorflow/workspace1.bzl
+++ b/tensorflow/workspace1.bzl
@@ -14,7 +14,6 @@ def workspace(with_rules_cc = True):
     Args:
       with_rules_cc: whether to load and patch rules_cc repository.
     """
-    native.register_toolchains("@local_config_python//:py_toolchain")
     rules_cuda_dependencies(with_rules_cc)
     rules_pkg_dependencies()
 
diff --git a/tensorflow/workspace2.bzl b/tensorflow/workspace2.bzl
index 18b63ab47fb..92993d7c341 100644
--- a/tensorflow/workspace2.bzl
+++ b/tensorflow/workspace2.bzl
@@ -14,7 +14,7 @@ load("//tensorflow/tools/toolchains/embedded/arm-linux:arm_linux_toolchain_confi
 load("//third_party:repo.bzl", "tf_http_archive", "tf_mirror_urls")
 load("//third_party/clang_toolchain:cc_configure_clang.bzl", "cc_download_clang_toolchain")
 load("//tensorflow/tools/def_file_filter:def_file_filter_configure.bzl", "def_file_filter_configure")
-load("//third_party/llvm:setup.bzl", "llvm_setup")
+#load("//third_party/llvm:setup.bzl", "llvm_setup")
 
 # Import third party repository rules. See go/tfbr-thirdparty.
 load("//third_party/FP16:workspace.bzl", FP16 = "repo")
@@ -530,7 +530,7 @@ def _tf_repositories():
         urls = tf_mirror_urls("https://github.com/antirez/linenoise/archive/4ce393a66b10903a0ef52edf9775ed526a17395f.tar.gz"),
     )
 
-    llvm_setup(name = "llvm-project")
+    # llvm_setup(name = "llvm-project")
 
     # Intel openMP that is part of LLVM sources.
     tf_http_archive(
diff --git a/tensorflow/workspace3.bzl b/tensorflow/workspace3.bzl
index a6c2c5c5835..3866493fcc9 100644
--- a/tensorflow/workspace3.bzl
+++ b/tensorflow/workspace3.bzl
@@ -38,7 +38,7 @@ def workspace():
 
     # Load the raw llvm-project.  llvm does not have build rules set up by default,
     # but provides a script for setting up build rules via overlays.
-    llvm("llvm-raw")
+    # llvm("llvm-raw")
 
 # Alias so it can be loaded without assigning to a different symbol to prevent
 # shadowing previous loads and trigger a buildifier warning.
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index 5c61810c5f0..b095208c079 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -12,7 +12,6 @@ def repo(name):
         sha256 = LLVM_SHA256,
         strip_prefix = "llvm-project-{commit}".format(commit = LLVM_COMMIT),
         urls = [
-            "https://storage.googleapis.com/mirror.tensorflow.org/github.com/llvm/llvm-project/archive/{commit}.tar.gz".format(commit = LLVM_COMMIT),
             "https://github.com/llvm/llvm-project/archive/{commit}.tar.gz".format(commit = LLVM_COMMIT),
         ],
         build_file = "//third_party/llvm:llvm.BUILD",
diff --git a/third_party/repo.bzl b/third_party/repo.bzl
index bda9e9518b4..4d294fbacbe 100644
--- a/third_party/repo.bzl
+++ b/third_party/repo.bzl
@@ -20,12 +20,8 @@ def tf_mirror_urls(url):
     Given a URL, it returns a list of the TF-mirror cache version of that URL
     and the original URL, suitable for use in `urls` field of `tf_http_archive`.
     """
-    if not url.startswith("https://"):
-        return [url]
-    return [
-        "https://storage.googleapis.com/mirror.tensorflow.org/%s" % url[8:],
-        url,
-    ]
+    # Don't use google's mirrors since some of them are broken.
+    return [url]
 
 def _get_env_var(ctx, name):
     if name in ctx.os.environ:
@@ -114,23 +110,10 @@ def tf_http_archive(name, sha256, urls, **kwargs):
     labels (e.g. '@foo//:bar') or from a label created in their repository (e.g.
     'str(Label("//:bar"))').
     """
-    if len(urls) < 2:
-        fail("tf_http_archive(urls) must have redundant URLs.")
-
-    if not any([mirror in urls[0] for mirror in (
-        "mirror.tensorflow.org",
-        "mirror.bazel.build",
-        "storage.googleapis.com",
-    )]):
-        fail("The first entry of tf_http_archive(urls) must be a mirror " +
-             "URL, preferrably mirror.tensorflow.org. Even if you don't have " +
-             "permission to mirror the file, please put the correctly " +
-             "formatted mirror URL there anyway, because someone will come " +
-             "along shortly thereafter and mirror the file.")
+
+    # Don't check for mirrors, because for whatever reason some of the mirrors are broken.
 
     if native.existing_rule(name):
-        print("\n\033[1;33mWarning:\033[0m skipping import of repository '" +
-              name + "' because it already exists.\n")
         return
 
     _tf_http_archive(
